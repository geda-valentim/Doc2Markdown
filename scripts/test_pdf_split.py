#!/usr/bin/env python3
"""
Teste standalone da funcionalidade de divis√£o de PDF
N√£o requer Docker ou API rodando
"""

import sys
from pathlib import Path

# Adicionar pasta shared ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from shared.pdf_splitter import PDFSplitter

def test_pdf_split():
    """Testa a divis√£o do PDF AI-50p.pdf"""

    # Localizar PDF
    pdf_path = Path(__file__).parent.parent / "AI-50p.pdf"

    if not pdf_path.exists():
        print(f"‚ùå PDF n√£o encontrado: {pdf_path}")
        return False

    print(f"‚úì PDF encontrado: {pdf_path}")
    print(f"  Tamanho: {pdf_path.stat().st_size / 1024:.2f} KB\n")

    # Criar splitter
    print("Criando PDFSplitter...")
    temp_dir = Path(__file__).parent.parent / "tmp" / "test_split"
    splitter = PDFSplitter(temp_dir=temp_dir)
    print(f"‚úì Diret√≥rio tempor√°rio: {splitter.temp_dir}\n")

    # Dividir PDF
    print("Dividindo PDF em p√°ginas...")
    print("=" * 60)

    try:
        page_files = splitter.split_pdf(pdf_path)

        print(f"\n‚úì PDF dividido com sucesso!")
        print(f"  Total de p√°ginas: {len(page_files)}")
        print(f"\nP√°ginas criadas:")
        print("-" * 60)

        total_size = 0
        for page_num, page_path in page_files[:10]:  # Mostrar primeiras 10
            size_kb = page_path.stat().st_size / 1024
            total_size += size_kb
            print(f"  P√°gina {page_num:2d}: {page_path.name:20s} ({size_kb:6.2f} KB)")

        if len(page_files) > 10:
            print(f"  ... (+ {len(page_files) - 10} p√°ginas)")

            # Calcular tamanho total
            for page_num, page_path in page_files[10:]:
                total_size += page_path.stat().st_size / 1024

        print("-" * 60)
        print(f"  Tamanho total das p√°ginas: {total_size:.2f} KB")
        print(f"  Tamanho m√©dio por p√°gina: {total_size / len(page_files):.2f} KB")

        # Mostrar algumas estat√≠sticas
        print(f"\nüìä Estat√≠sticas:")
        print(f"  PDF original: {pdf_path.stat().st_size / 1024:.2f} KB")
        print(f"  P√°ginas divididas: {total_size:.2f} KB")
        print(f"  Overhead: {((total_size - pdf_path.stat().st_size / 1024) / (pdf_path.stat().st_size / 1024) * 100):.1f}%")

        # Verificar se primeira e √∫ltima p√°gina existem
        print(f"\nüîç Verifica√ß√£o:")
        first_page = page_files[0][1]
        last_page = page_files[-1][1]

        print(f"  Primeira p√°gina: {first_page.name} ({'‚úì existe' if first_page.exists() else '‚ùå n√£o existe'})")
        print(f"  √öltima p√°gina: {last_page.name} ({'‚úì existe' if last_page.exists() else '‚ùå n√£o existe'})")

        # Cleanup
        print(f"\nüßπ Limpeza:")
        cleanup = input("  Deseja remover arquivos tempor√°rios? (s/N): ").strip().lower()
        if cleanup == 's':
            splitter.cleanup_pages(page_files)
            print("  ‚úì Arquivos tempor√°rios removidos")
            # Remover diret√≥rio se vazio
            if splitter.temp_dir.exists() and not any(splitter.temp_dir.iterdir()):
                splitter.temp_dir.rmdir()
                print("  ‚úì Diret√≥rio tempor√°rio removido")
        else:
            print(f"  ‚Ñπ Arquivos mantidos em: {splitter.temp_dir}")

        return True

    except Exception as e:
        print(f"\n‚ùå Erro ao dividir PDF: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("Teste de Divis√£o de PDF - Doc2MD")
    print("=" * 60)
    print()

    success = test_pdf_split()

    print("\n" + "=" * 60)
    if success:
        print("‚úì Teste conclu√≠do com sucesso!")
    else:
        print("‚ùå Teste falhou")
    print("=" * 60)
